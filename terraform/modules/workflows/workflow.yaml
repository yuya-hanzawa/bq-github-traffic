main:
  params: [ args ]
  steps:
    - init:
        assign:
          - table_path: $${"`" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "." + args.dataset_id + "."}
          - selectStatement: $${"SELECT name, v.count AS total_count, v.uniques, v.timestamp AS utc_time FROM "}
    - multi_request:
        try:
          steps:
            - call_function:
                call: http.get
                args:
                  url: $${args.url}
                  auth:
                    type: OIDC
                result: call_function_result
            - check_warehouse_table:
                call: googleapis.bigquery.v2.tables.list
                args:
                  datasetId: $${args.dataset_id}
                  projectId: $${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
                result: listResult
            - conditionalSwitch:
                switch:
                  - condition: $${listResult.totalItems == 1}
                    next: create_warehouse_table
                next: execute_sql
            - create_warehouse_table:
                call: googleapis.bigquery.v2.jobs.query
                args:
                  projectId: $${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
                  body:
                    query: $${"CREATE TABLE " + table_path + "github_traffic_warehouse` AS (" + selectStatement + table_path + "github_traffic_" + call_function_result.body + "`, UNNEST(views) as v)"}
                    useLegacySql: false
                next: finish
            - execute_sql:
                call: googleapis.bigquery.v2.jobs.query
                args:
                  projectId: $${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
                  body:
                    query: $${"INSERT " + table_path + "github_traffic_warehouse` WITH table_tmp AS (SELECT name, v.count AS total_count, v.uniques, v.timestamp AS utc_time FROM " + table_path + "github_traffic_" + call_function_result.body + "`, UNNEST(views) as v SELECT name, total_count, uniques, utc_time FROM table_tmp WHERE utc_time = PARSE_TIMESTAMP('%Y%m%d', " + call_function_result.body)}
                    useLegacySql: false
            - finish:
                return: "Successful"
        except:
          as: e
          steps:
            - log_error:
                call: sys.log
                args:
                  text: $${json.encode_to_string(e)}
                  severity: CRITICAL
            - raise_error:
                raise: $${e}
